{
  "version": 3,
  "sources": ["../../../../../../../src/material/grid-list/tile-coordinator.ts", "../../../../../../../src/material/grid-list/grid-list-base.ts", "../../../../../../../src/material/grid-list/grid-tile.ts", "../../../../../../../src/material/grid-list/grid-tile.html", "../../../../../../../src/material/grid-list/grid-tile-text.html", "../../../../../../../src/material/grid-list/tile-styler.ts", "../../../../../../../src/material/grid-list/grid-list.ts", "../../../../../../../src/material/grid-list/grid-list.html", "../../../../../../../src/material/grid-list/grid-list-module.ts", "../../../../../../../src/material/grid-list/public-api.ts", "../../../../../../../src/material/grid-list/grid-list_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Interface describing a tile.\n * @docs-private\n */\nexport interface Tile {\n  /** Amount of rows that the tile takes up. */\n  rowspan: number;\n  /** Amount of columns that the tile takes up. */\n  colspan: number;\n}\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number {\n    return this.rowIndex + 1;\n  }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   * @param tiles Tiles to be positioned.\n   */\n  update(numColumns: number, tiles: Tile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: Tile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(\n        `mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n          `grid with cols=\"${this.tracker.length}\".`,\n      );\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: Tile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n    // the DOM. This is needed for the grid-tile harness.\n    '[attr.rowspan]': 'rowspan',\n    '[attr.colspan]': 'colspan',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase,\n  ) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number {\n    return this._rowspan;\n  }\n  set rowspan(value: NumberInput) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number {\n    return this._colspan;\n  }\n  set colspan(value: NumberInput) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'},\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'},\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'},\n})\nexport class MatGridTileFooterCssMatStyler {}\n", "<div class=\"mat-grid-tile-content\">\n  <ng-content></ng-content>\n</div>\n", "<ng-content select=\"[mat-grid-avatar], [matGridAvatar]\"></ng-content>\n<div class=\"mat-grid-list-text\"><ng-content select=\"[mat-line], [matLine]\"></ng-content></div>\n<ng-content></ng-content>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/** Object that can be styled by the `TileStyler`. */\nexport interface TileStyleTarget {\n  _setListStyle(style: [string, string | null] | null): void;\n  _tiles: QueryList<MatGridTile>;\n}\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number, gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(\n    tile: MatGridTile,\n    rowIndex: number,\n    percentWidth: number,\n    gutterWidth: number,\n  ): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null {\n    return null;\n  }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: TileStyleTarget): void;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n  constructor(public fixedRowHeight: string) {\n    super();\n  }\n\n  override init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (\n      !cssCalcAllowedValue.test(this.fixedRowHeight) &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  override setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  override getComputedHeight(): [string, string] {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n\n  override reset(list: TileStyleTarget) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(\n    tile: MatGridTile,\n    rowIndex: number,\n    percentWidth: number,\n    gutterWidth: number,\n  ): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  override getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom',\n      calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`),\n    ];\n  }\n\n  reset(list: TileStyleTarget) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: TileStyleTarget) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {\n  TileStyler,\n  FitTileStyler,\n  RatioTileStyler,\n  FixedTileStyler,\n  TileStyleTarget,\n} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n    // needed for the grid-list harness.\n    '[attr.cols]': 'cols',\n  },\n  providers: [\n    {\n      provide: MAT_GRID_LIST,\n      useExisting: MatGridList,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked, TileStyleTarget {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determining the position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() private _dir: Directionality,\n  ) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number {\n    return this._cols;\n  }\n  set cols(value: NumberInput) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string {\n    return this._gutter;\n  }\n  set gutterSize(value: string) {\n    this._gutter = `${value == null ? '' : value}`;\n  }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number {\n    return this._rowHeight;\n  }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(\n        `mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`,\n      );\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n", "<div>\n  <ng-content></ng-content>\n</div>", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile,\n  MatGridTileText,\n  MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler,\n  MatGridAvatarCssMatStyler,\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler,\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler,\n  ],\n})\nexport class MatGridListModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {TileCoordinator} from './tile-coordinator';\n\nexport * from './grid-list-module';\nexport * from './grid-list';\nexport * from './grid-tile';\n\n// Privately exported for the grid-list harness.\nexport const ɵTileCoordinator = TileCoordinator;\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "_c2", "_c3", "TileCoordinator", "constructor", "columnIndex", "rowIndex", "rowCount", "rowspan", "lastRowMax", "Math", "max", "tracker", "update", "numColumns", "tiles", "Array", "fill", "length", "positions", "map", "tile", "_trackTile", "gapStartIndex", "_findMatchingGap", "colspan", "_markTilePosition", "TilePosition", "tileCols", "ngDevMode", "Error", "gapEndIndex", "_nextRow", "indexOf", "_findGapEndIndex", "i", "start", "row", "col", "MAT_GRID_LIST", "InjectionToken", "MatGridTile", "_element", "_gridList", "_rowspan", "_colspan", "value", "round", "coerceNumberProperty", "_setStyle", "property", "nativeElement", "style", "ɵfac", "MatGridTile_Factory", "t", "ɵɵdirectiveInject", "ElementRef", "ɵcmp", "ɵɵdefineComponent", "type", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatGridTile_HostBindings", "rf", "ctx", "i0", "ɵɵattribute", "inputs", "exportAs", "ngContentSelectors", "decls", "vars", "consts", "template", "MatGridTile_Template", "ɵɵprojectionDef", "ɵɵelementStart", "ɵɵprojection", "ɵɵelementEnd", "styles", "encapsulation", "changeDetection", "ɵsetClassMetadata", "Component", "host", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "Optional", "Inject", "Input", "MatGridTileText", "ngAfterContentInit", "setLines", "_lines", "contentQueries", "MatGridTileText_ContentQueries", "dirIndex", "ɵɵcontentQuery", "MatLine", "_t", "ɵɵqueryRefresh", "ɵɵloadQuery", "MatGridTileText_Template", "args", "selector", "ContentChildren", "descendants", "MatGridAvatarCssMatStyler", "ɵɵdefineDirective", "Directive", "MatGridTileHeaderCssMatStyler", "MatGridTileFooterCssMatStyler", "cssCalcAllowedValue", "TileStyler", "_rows", "init", "gutterSize", "cols", "direction", "_gutterSize", "normalizeUnits", "_cols", "_direction", "getBaseTileSize", "sizePercent", "gutterFraction", "getTilePosition", "baseSize", "offset", "calc", "getTileSize", "span", "setStyle", "colIndex", "percentWidthPerTile", "gutterWidthFractionPerTile", "setColStyles", "setRowStyles", "percentWidth", "gutterWidth", "baseTileWidth", "side", "getGutterSpan", "getTileSpan", "tileHeight", "getComputedHeight", "FixedTileStyler", "fixedRowHeight", "test", "reset", "list", "_setListStyle", "_tiles", "forEach", "RatioTileStyler", "_parseRatio", "percentHeightPerTile", "rowHeightRatio", "baseTileHeight", "ratioParts", "split", "parseFloat", "FitTileStyler", "gutterHeightPerTile", "exp", "match", "MAT_FIT_MODE", "MatGridList", "_dir", "_gutter", "rowHeight", "_rowHeight", "newValue", "_setTileStyler", "ngOnInit", "_checkCols", "_checkRowHeight", "ngAfterContentChecked", "_layoutTiles", "_tileStyler", "_tileCoordinator", "filter", "index", "pos", "Directionality", "MatGridList_ContentQueries", "MatGridList_HostBindings", "features", "ɵɵProvidersFeature", "provide", "useExisting", "MatGridList_Template", "providers", "MatGridListModule", "ɵmod", "ɵɵdefineNgModule", "declarations", "imports", "MatLineModule", "MatCommonModule", "exports", "ɵinj", "ɵɵdefineInjector", "NgModule", "ɵTileCoordinator"]
}
